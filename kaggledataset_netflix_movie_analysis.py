# -*- coding: utf-8 -*-
"""KaggleDataSet_Netflix_Movie_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQNKhNrrwvpxNsGLRJj6eIIAknV4gfzz
"""

# Commented out IPython magic to ensure Python compatibility.
# importing the libraries that will allow us to work with Pandas DataFrames
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt

# %matplotlib inline

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

import os

os.environ['KAGGLE_CONFIG_DIR']='/content/drive/MyDrive/kaggleapitoken'

# this is the copy of API found on the dashboard for a particular dataset
!kaggle datasets download -d shivamb/netflix-shows

df = pd.read_csv('netflix-shows.zip')

df.head(2)

df.shape

n_data = df.groupby(['release_year','type']).show_id.count()

n_data.dtypes

# let's start with groupby - counting thenumber of tv shows and movies by year; # as_index = False - you don't want to set release_year as index
n_data = df.groupby(['release_year','type'],as_index = False).show_id.count()
n_data

n_data_pivot_table = n_data.pivot_table(index ='release_year' , columns ='type' , values = 'show_id')
n_data_pivot_table.head(30)

n_data_pivot_table = n_data.pivot_table(index ='release_year' , columns ='type' , values = 'show_id')
n_data_pivot_table.head(30)

"""Pivot"""

n_data_pivot_table = n_data.pivot_table(index ='release_year' , columns ='type' , values = 'show_id').reset_index()
n_data_pivot_table.head(30)

# let's use fillna to fill in NaNs with Os

n_data_pivot_table.fillna(0, inplace = True)
n_data_pivot_table.head()

n_data_pivot_table.to_csv('example.csv')

"""let's build some visuals"""

fig, ax = plt.subplots() 

# creating the visual:

ax.plot(n_data_pivot_table.release_year, n_data_pivot_table.Movie,label = 'Movies', color = 'olive', lw = '3')
ax.plot(n_data_pivot_table.release_year, n_data_pivot_table['TV Show'], label = 'Tv Shows', color = 'navy', lw = '3')

ax.set_ylabel('Number of Movies/TV Shows') 
ax.set_xlabel('Year of Release')
ax.set_title("Trend Chart")

plt.text(x=1950, y=400, s=r'Majority Movies are released after 2000 and Tv Shows mostly after 2010')

fig.set_size_inches(18.5, 7.5)
plt.grid(linestyle = '--', color = 'grey', lw = 1)
ax.legend()
plt.show()

"""## Bar Chart"""

df.head(2)

# filter the df just for the information about movies

df_country = df[df['type']=='Movie']

print(df.shape[0])
print(df_country.shape[0])

df_country=df_country.groupby('country')['show_id'].agg(nr_movies = 'count').nlargest(15,'nr_movies')
df_country

# the first bar chart

fig,ax = plt.subplots(figsize =(24,7))
ax.bar(df_country.index, df_country.nr_movies, color = 'purple')

for index, count in enumerate(df_country.nr_movies):
  plt.text(x = index, y = count, s = f"{count}",fontdict=dict(fontsize=20))


# setting the rotation of our x-labels
ax.set_xticklabels(df_country.index, rotation = 90)

plt.show()

# created a hor bar chart
fig, ax = plt.subplots(figsize = (16,7))
ax.barh(df_country.index, df_country.nr_movies, color = 'orange')
plt.show()

# horisontal bar charts

# created a hor bar chart
fig, ax = plt.subplots(figsize = (16,7))
ax.barh(df_country.index, df_country.nr_movies, color = 'orange')
# inverting the y-axis
ax.invert_yaxis()


plt.show()

## Stacked Bar Charts


n_data_pivot_table.head(5)

df_data = n_data_pivot_table[n_data_pivot_table['release_year']>2010]
df_data.head()

df_data = df_data.rename({'release_year':'Year', 'TV Show': 'TVshow'}, axis=1)
df_data

import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import matplotlib.pyplot as plt

data1 = [23,85, 72, 43, 52]
data2 = [42, 35, 21, 16, 9]
width =0.3
plt.bar(np.arange(len(data1)), data1, width=width)
plt.bar(np.arange(len(data2))+ width, data2, width=width)
plt.show()

ax = df_data[['Movie','TVshow']].plot.bar(rot=0)


plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

n_data.head(2)

new_df = n_data[n_data['release_year']>2010]
new_df.head(3)

sns.barplot(x = 'release_year', y = 'show_id', hue = 'type', data = new_df)
plt.show()